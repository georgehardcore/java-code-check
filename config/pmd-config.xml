<?xml version="1.0"?>

<ruleset name="AeroConvensions">

    <!-- Basic rules. Unfortunately we can only enable some checks, not
         disable them. So there are so many basic checks defined -->
    <rule ref="category/java/errorprone.xml/JumbledIncrementer" />
    <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop" />
    <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode" />
    <rule ref="category/java/multithreading.xml/DoubleCheckedLocking" />
    <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock" />
    <rule ref="category/java/errorprone.xml/UnconditionalIfStatement" />
    <rule ref="category/java/performance.xml/BooleanInstantiation" />
    <rule ref="category/java/design.xml/CollapsibleIfStatements" />
    <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray" />
    <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor" />
    <rule ref="category/java/errorprone.xml/MisplacedNullCheck" />
    <rule ref="category/java/errorprone.xml/BrokenNullCheck" />
    <rule ref="category/java/performance.xml/BigIntegerInstantiation" />
    <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues" />
    <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP" />
    <rule ref="category/java/bestpractices.xml/CheckResultSet" />
    <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators" />
    <rule ref="category/java/multithreading.xml/DontCallThreadRun" />

    <!-- Empty statements catching -->
    <rule ref="category/java/errorprone.xml/EmptyCatchBlock" />

    <rule ref="category/java/errorprone.xml/EmptyCatchBlock" />
    <rule ref="category/java/errorprone.xml/EmptyFinallyBlock" />
    <rule ref="category/java/errorprone.xml/EmptyIfStmt" />
    <rule ref="category/java/errorprone.xml/EmptyInitializer" />
    <rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop" />
    <rule ref="category/java/errorprone.xml/EmptyCatchBlock" />

    <!-- Checks for unnecessary things -->
    <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary" />
    <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals" />
    <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable" />
    <rule ref="category/java/codestyle.xml/UnnecessaryModifier" />
    <rule ref="category/java/design.xml/UselessOverridingMethod" />
    <rule ref="category/java/codestyle.xml/UselessParentheses" />
    <rule ref="category/java/codestyle.xml/UselessQualifiedThis" />
    <rule ref="category/java/codestyle.xml/UnnecessaryReturn" />


    <!-- Clone implementation rules -->
    <rule ref="category/java/errorprone.xml/CloneMethodMustBePublic" />
    <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable" />
    <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName" />
    <rule ref="category/java/errorprone.xml/CloneThrowsCloneNotSupportedException" />
    <rule ref="category/java/errorprone.xml/ProperCloneImplementation" />

    <!-- Another code size tests -->
    <description>Global configuration for code size restrictions</description>
    <rule ref="category/java/design.xml/NPathComplexity" />
    <rule ref="category/java/design.xml/ExcessiveMethodLength" />
    <rule ref="category/java/design.xml/ExcessiveParameterList" />
    <rule ref="category/java/design.xml/ExcessiveClassLength" />
    <rule ref="category/java/design.xml/CyclomaticComplexity" />
    <rule ref="category/java/design.xml/ExcessivePublicCount" />
    <rule ref="category/java/design.xml/TooManyFields" />
    <rule ref="category/java/design.xml/TooManyMethods">
        <properties>
            <property name="maxmethods" value="40" />
        </properties>
    </rule>

    <!-- Some controversial checks -->
    <rule ref="category/java/errorprone.xml/CallSuperFirst" />
    <rule ref="category/java/errorprone.xml/CallSuperLast" />
    <rule ref="category/java/codestyle.xml/UnnecessaryConstructor" />
    <rule ref="category/java/errorprone.xml/NullAssignment" />
    <rule ref="category/java/errorprone.xml/DontImportSun" />

    <!-- Code coupling check -->
    <rule ref="category/java/design.xml/CouplingBetweenObjects" />


    <!-- Some rules for design -->

    <rule ref="category/java/design.xml/SimplifyBooleanReturns" />
    <rule ref="category/java/design.xml/SimplifyBooleanExpressions" />
    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts" />
    <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters" />
    <rule ref="category/java/design.xml/SwitchDensity" />
    <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod" />
    <rule ref="category/java/design.xml/FinalFieldCouldBeStatic" />
    <rule ref="category/java/errorprone.xml/CloseResource" />
    <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt" />
    <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement" />
    <rule ref="category/java/performance.xml/OptimizableToArrayCall" />
    <rule ref="category/java/errorprone.xml/BadComparison" />
    <rule ref="category/java/errorprone.xml/EqualsNull" />
    <rule ref="category/java/codestyle.xml/ConfusingTernary" />
    <rule ref="category/java/errorprone.xml/InstantiationToGetClass" />
    <rule ref="category/java/errorprone.xml/IdempotentOperations" />
    <rule ref="category/java/errorprone.xml/SimpleDateFormatNeedsLocale" />
    <rule ref="category/java/design.xml/ImmutableField" />
    <rule ref="category/java/errorprone.xml/UseLocaleWithCaseConversions" />
    <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass" />
    <rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic" />
    <rule ref="category/java/multithreading.xml/AvoidSynchronizedAtMethodLevel" />
    <rule ref="category/java/errorprone.xml/MissingBreakInSwitch" />
    <rule ref="category/java/multithreading.xml/UseNotifyAllInsteadOfNotify" />
    <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause" />
    <rule ref="category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod" />
    <rule ref="category/java/design.xml/SimplifyConditional" />
    <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals" />
    <rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInComparisons" />
    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn" />
    <rule ref="category/java/documentation.xml/UncommentedEmptyMethodBody" />
    <rule ref="category/java/bestpractices.xml/ConstantsInInterface" />
    <rule ref="category/java/multithreading.xml/UnsynchronizedStaticDateFormatter" />
    <rule ref="category/java/bestpractices.xml/PreserveStackTrace" />
    <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty" />
    <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal" />
    <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract" />
    <rule ref="category/java/design.xml/SingularField" />
    <rule ref="category/java/errorprone.xml/ReturnEmptyArrayRatherThanNull" />
    <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod" />

    <!-- Checkers for method finalize() -->
    <rule ref="category/java/errorprone.xml/AvoidCallingFinalize" />
    <rule ref="category/java/errorprone.xml/EmptyFinalizer" />
    <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize" />
    <rule ref="category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize" />
    <rule ref="category/java/errorprone.xml/FinalizeOverloaded" />
    <rule ref="category/java/errorprone.xml/FinalizeShouldBeProtected" />

    <!-- Check for import rules -->
    <rule ref="category/java/bestpractices.xml/UnusedImports" />
    <rule ref="category/java/errorprone.xml/ImportFromSamePackage" />
    <rule ref="category/java/codestyle.xml/DontImportJavaLang" />
    <rule ref="category/java/codestyle.xml/DuplicateImports" />
    <rule ref="category/java/codestyle.xml/TooManyStaticImports" />
    <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName" />


    <!-- Cool naming rules -->
    <rule ref="category/java/codestyle.xml/ShortVariable">
        <properties>
            <property name="violationSuppressRegex" value=".*like [xyzijk].*" />
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/ShortMethodName" />
    <rule ref="category/java/codestyle.xml/MethodNamingConventions" />
    <rule ref="category/java/codestyle.xml/ClassNamingConventions" />
    <rule ref="category/java/codestyle.xml/AvoidDollarSigns" />
    <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass" />
    <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName" />
    <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingTypeName" />
    <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingMethodName" />
    <rule ref="category/java/codestyle.xml/NoPackage" />
    <rule ref="category/java/codestyle.xml/PackageCase" />
    <rule ref="category/java/codestyle.xml/GenericsNaming" />

    <!-- Some base optimization considerations -->
    <rule ref="category/java/codestyle.xml/PrematureDeclaration" />
    <rule ref="category/java/performance.xml/AddEmptyString" />
    <rule ref="category/java/performance.xml/AvoidArrayLoops" />
    <rule ref="category/java/performance.xml/SimplifyStartsWith" />
    <rule ref="category/java/performance.xml/UnnecessaryWrapperObjectCreation" />
    <rule ref="category/java/performance.xml/UseArrayListInsteadOfVector" />
    <rule ref="category/java/performance.xml/UseArraysAsList" />


    <!-- Strict exception checks -->
    <rule ref="category/java/errorprone.xml/AvoidCatchingNPE" />
    <rule ref="category/java/errorprone.xml/AvoidCatchingThrowable" />
    <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally" />
    <rule ref="category/java/design.xml/AvoidCatchingGenericException" />
    <rule ref="category/java/design.xml/AvoidRethrowingException" />
    <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException" />
    <rule ref="category/java/design.xml/AvoidThrowingNullPointerException" />
    <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes" />
    <rule ref="category/java/design.xml/DoNotExtendJavaLangError" />
    <rule ref="category/java/design.xml/ExceptionAsFlowControl" />
    <rule ref="category/java/design.xml/SignatureDeclareThrowsException" />
    <rule ref="category/java/design.xml/DoNotExtendJavaLangError" />

    <!-- Some checks for unforgivable string usage -->
    <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends" />

    <!-- Unused code rules -->
    <rule ref="category/java/bestpractices.xml/UnusedFormalParameter" />
    <rule ref="category/java/bestpractices.xml/UnusedLocalVariable" />
    <rule ref="category/java/bestpractices.xml/UnusedPrivateField" />
    <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod" />

</ruleset>
